rules_version = '2';

// Firebase Storage Security Rules for CommUnity
service firebase.storage {
  match /b/{bucket}/o {
    // Files uploaded by authenticated users
    match /files/{userId}/{fileName} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow write access only to the file owner
      allow write: if request.auth != null 
                   && request.auth.uid == userId
                   && isValidFile();
      
      // Allow delete access to file owner or admin
      allow delete: if request.auth != null 
                    && (request.auth.uid == userId || isAdmin());
    }
    
    // Helper functions
    function isValidFile() {
      // Check file size (10MB max)
      return request.resource.size <= 10 * 1024 * 1024
             && isValidFileType();
    }
    
    function isValidFileType() {
      // Allowed file types
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('application/pdf') ||
             request.resource.contentType.matches('application/msword') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document') ||
             request.resource.contentType.matches('application/vnd.ms-excel') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') ||
             request.resource.contentType.matches('application/vnd.ms-powerpoint') ||
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.presentationml.presentation') ||
             request.resource.contentType.matches('text/plain');
    }
    
    function isAdmin() {
      // Check if user has admin role in Firestore
      return exists(/databases/(default)/documents/users/$(request.auth.uid)) &&
             get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
